~~~~~~~~~~~~~~~~~~~~~~~
Day 7: 3rd Aug. 2024
~~~~~~~~~~~~~~~~~~~~~~~	
	
	Module ::: Jenkins
	
		Jenkins - Build Orchestration Tool :::	

			Jenkins is used to orchetrate the devops tools and create end-to-end devops CI/CD Pipeline to perform automated builds and deployment.
			
		Jenkins 
		Bamboo
		Azure Pipeline			Declarative Languages using json/yaml scripts --> files are based key:value pairs
		AWS Code Pipeline 
		gitlab-ci 
		github action
		
		
		DevOps Assessment Phase:
		
			Onpremise Environment ::
			
				Jenkins	-> Open-Source Build Orchestration Tool 
			
			Cloud Platform :: client - aws - 
			
				DevOps on Cloud :::
			
					Open-Source Build Orchestration Tool like Jenkins 
					
					Managed Services 
						
		
		Working in Jenkins :
		
			CI/CD process automation Scripts are written using groovy scripting language.
				- Scripted Pipelines 		==> required core scripting knowledge & it is very complex to write and manage 
				- Declarative Pipelines		==> simplified version of Scripted Pipelines
				
		Jenkins Architecture :::
		
			- Jenkins is based on :
				Master - Slave Architecture
				
				Jenkins_Master Node (VM) 				
					Jenkins_Slave Node1 (VM)
					Jenkins_Slave Node2 (VM)
					
		Working with Jenkins ::::
		
			1. Build and Release Workload / Frequency :
			
				Master - Slave Architecture
				
				Jenkins_Master Node (VM) 		==> Install Jenkins, It is used to Create Jenkins CICD pipeline Projects
													Schedule to run on the Slave Nodes
																						
					Jenkins_Slave Node1 (VM)
					Jenkins_Slave Node2 (VM)				

			Using DevOps Automation :: 
			
				Build the source code ---> Compile the source code and create artifacts - Binaries (*.war/*.jar/*.exec/*.dll)
				Unit Testing 
				Promote the Change to Test Environments
				Notify the Testing Teams 				
			
			scenario 1:
			
				Jenkins Master (VM) 			Install Jenkins, It is used to Create Jenkins CICD pipeline Projects
												Java Build tool to be installed in this node, perform build and create artifacts.
					
			scenario 2: Master - Slave Architecture
			
				Jenkins Master (VM) 			# Install Jenkins, Create Jenkins CICD pipeline Projects
												# Schedule to run the builds on the Slave Nodes
				
					Jenkins_Slave1(VM)			# Java Build 
					Jenkins_Slave2(VM)			# Python Build 
					Jenkins_Slave3(VM)			# NodeJS Build 
					Jenkins_Slave4(VM)			# Angular Build 
					Jenkins_Slave5(VM)			# .Net SDK Build 
					
					
		
		Working with Jenkins ::::


			Developers' Perspective :
			
				- Developers are just the consumers 
					
					
			DevOps Perspective ::

				- DevOps Team is the Owner/Administrator of Jenkins
					
			Roles and Responsibilites of DevOps Engineer:			
			
				- Installation of Jenkins package 
				- Management of Post Build Actions of Jenkins 
				- Global System Management 
				- Jenkins Plugins Management
				- Tools Management 
				- User Management 
				- Security Management 
				- Credential Management 
				- Jenkins Master and Slave Node Setup and Configurations 
				- Integration of all the required external servers to Jenkins Master 
				- Creation of CICD Pipeline Projects 
				- Onboarding the applications to Jenkins CICD Process 
				- Periodic upgrade of Jenkins and its plugins 
				- Periodic backup of Jenkins Server and its resources 	
				- Trouble-shooting issues
			
			
			- Setup Jenkins Server :::
			
				- Jenkins run as a service. It runs in default port : 8080
			
				- Create a EC2 Instance 
					- t2.mirco
					- AMI - previous version of ubuntu - v22.04

				- Add Security Group - inbound-rule - port 8080 
				
				- Login to EC2 Instance & Install Jenkins and its tools 
										https://www.jenkins.io/doc/book/installing/linux/
				
				- Use Web Browser to access the Jenkins Dashboard
				
				
		Environments :::
		
			Non-Prod Environments							=====>				Production Environments
			
				Dev Environment
				Build Environment
				Test Environments
					QA  - Quality Assurance Testing 
					UAT - User Acceptance Testing			----->					Production Server(s) - 24/7

			

	DevOps LifeCycle :::
	
		Developers 
		
			Coding 
			
			Commit the code to Repository(GITHUB)
			
			Build 												# Build Tool 
			
			Unit Testing 										# Unit Testing Tool 
			
			Promote the code to QA Environment					# Deployment Tools 
			
			QA Testing 											# Testing Tools 
			
			Promote the Code to UAT Environment					# Deployment Tools 
                                                                
			UAT Testing                                         # Testing Tools 
			
			Promote the Code to Prod Environment				# Deployment Tools 
			                                                    
			Prod Testing                                        # Testing Tools 
			
			Application will be LIVE 

			Production Monitoring 								# monitoring Tools 

~~~~~~~~~~~~~~~~~~~~~~~
Day 8: 4th Aug. 2024
~~~~~~~~~~~~~~~~~~~~~~~	

		- Jenkins Plugins Management
		- User Management 
		- Security Management 
		- Credential Management 
		- Create Sample Jenkins Jobs 
		- Working Jenkins Variables
		- Jenkins Master and Slave Node Setup and Configurations 
		- Configure Tomcat Server to automate deployments



	Jenkins Jobs/Projects:
	
		- Free-Style Projects 
			- Completely based on the manual configurations 

			
			
		Handling Variables :::
		
			- Environment Variables			# Its reserved key-word 	
			
			
				echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
			
			
				"${var}"
				
				
			- User-Defined Variables 
			
				a = 5
				
				envi = 'QA'
				
				
		
		- Pipeline Projects
			- Completely based on the scripting - groovy scripts to configure the pipeline projects 
			
			- Two of Pipelines:
			
				- Scripted Pipelines 
				
				- Declarative Pipelines

			CI/CD process automation Scripts are written using groovy scripting language.
				- Scripted Pipelines 		==> required core scripting knowledge & it is very complex to write and manage 
				- Declarative Pipelines		==> simplified version of Scripted Pipelines
	
		Jenkins Pipeline Jobs Composed of various Stages.	
		
		Pipeline 
		{
			Stages
			{
				stage1{
					steps{
					}
				}
				stage2{
					steps{
					}
				}
				stage3{
					steps{
					}
				}
			}
		}
		

pipeline {
    agent any

    stages {
        stage('SCM-Checkout') {
            steps {
                echo 'Perform SCM Checkout'
            }
        }
        stage('Application Build ') {
            steps {
                echo 'Build the Application - Compile and Create Artifacts'
            }
        }
        stage('Deploy Artifacts to QA Environment') {
            steps {
                echo 'Deploy to QA'
            }
        }
    }
}


Jenkins Pipeline --> Create CICD Automation process:

CI/CD ???

	Jenkins Master and Slave Node Setup and Configurations ::

		Jenkins_Master (VM) 			- Jenkins Pipeline Creation 
		
			Jenkins_Slave_Node (VM) 	- Java Application Build 
	


	Plan for any Infra-Structure :::
	
		Purpose of the Servers :
		
			Jenkins_Master 							# Create Jenkins CICD pipeline Projects
			                                        # Schedule to run the builds on the Slave Nodes		
													
				Jenkins_Slave 						# To perform Java Application Builds and Create Artifacts 
				
				

		Tools to be installed in the servers :
		
			Jenkins_Master 							# git, jdk, jenkins
				Jenkins_Slave						# git, jdk, Build Tool(Maven)
				
		Properties of Application Build Tools :::
		
		Java Maven Application Build Tool :
		
			- Used to Compile java application source code 
			- Create Artifacts (*.war/*.jar)
			- Perform Automated Unit Testing 
			
			- Maven POM.xml file 
				- pom.xml file is maintained in the source code repository by the application team, to define the application properties, dependencies and plugins that are requried to build.
				
			- Maven Goals
				- maven task :
					- compile 	# Used to compile the source code 
					- test 		# compile the source code and perform automated unit testing 
					- package 	# compile, test and create artifacts(*.war/*.jar) in target folder of the workspace
					- clean		# clean-up the target folder
					
			mvn - executable command 
			
				mvn compile 
				
				mvn test 
				
				mvn clean package 
			
			#git - executable command 
			
	Create CI Pipeline :::
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM-Checkout') {
            steps {
                echo 'Perform SCM Checkout'
		git 'https://github.com/SA-DevOps-Cloud/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build ') {
		agent {label slave2}
            steps {
                echo 'Build the Application - Compile and Create Artifacts'
				sh 'mvn clean package '
            }
        }
    }
}
		
	 Configure Tomcat Server to automate deployments


		Jenkins_Master (VM) 			- Jenkins Pipeline Creation 		
			Jenkins_Slave_Node (VM) 	- Java Application Build 
			
		QA_Test_Server (VM)				- Deploy/Run the Application for QA Testing 

	Create CI/CD Pipeline :::
	
pipeline {
    agent any

    stages {
        stage('SCM-Checkout') {
            steps {
                echo 'Perform SCM Checkout'
            }
        }
        stage('Application Build ') {
            steps {
                echo 'Build the Application - Compile and Create Artifacts'
            }
        }
        stage('Deploy Artifacts to QA Environment') {
            steps {
                echo 'Deploy to QA'
            }
        }
        stage('Deploy Artifacts to UAT Environment') {
            steps {
                echo 'Deploy to UAT'
            }
        }
		
        stage('Deploy Artifacts to PROD Environment') {
            steps {
                echo 'Deploy to PROD'
            }
        }
    }
}
