~~~~~~~~~~~~~~~~~~~~~~~
Day 2: 14th July 2024
~~~~~~~~~~~~~~~~~~~~~~~			
	
	
	Introduction to Cloud Platform 
	
	AWS Free Tier Account 
	
	Login to AWS Console
	
	Create EC2 Instances(Virtual Machines)
	
	Linux 
	


	On-premises Environments
	
		Servers,Storage,Networking,Dbase
	
		Software - Cost 
		
	Cloud Environments :::
	
		Core Linux Administration :::
		
			Linux Machine 
			
			Hypervisor & VMs - 16 GB of RAM 2CPU 
			
			
			Create AZURE / AWS - Account 
			
				Create VMs 
				
				
			Telecomm - SP1 -- Introduce a new service to their customers -> ASAP! IT Services
								Build Servers/Test Servers/Deployment servers
								
			SP2 
			
			
	
	AWS Free Tier Account -- https://aws.amazon.com/console/
	
		Active Email_ID & Mobile Number 
		Active Credit/Debit Card - enabled with International Trancsaction
		12 Months free tier account - 
		
		
	
	Login to AWS Console
	
	Create EC2 Instances(Virtual Machines)
	
	Linux 
	

	AWS Account Creation Process!
	
	https://aws.amazon.com/console/
	
	
	Login to AWS Console :::
	
		- Login as a root user (Using Email_ID & Password)		# Default
		
			(or)
			
		- IAM User 												# Not Now!
			
	In AWS Cloud platform :::

		Regions 	(Locations)
		
			Availability Zones (Data Centers)
				
				
	Upon Login to AWS Console 
		- Choose set AWS Region.
		- Create the resources within that regions
		
		
	Billing Management :::
	
		Free Tier ::
		
		
	Create EC2 Instances(Virtual Machines) :::
	
	Select EC2 Service 
	
	From EC2 Dashboard - Select Launch Instance
	
	
	How to Access the remote service?
	
	www.gmail.com
	
		- Web Browser 
		- Authentication - UserName & Password 
		
		
	AWS Platform 
		EC2 Instance (Virtual Machine) 
		
		- SSH Connection Protocol
		
		- Authentication Types :
			- Password Based Authentication
			- Token Based Authentication
			- Key Based Authentication
				- Public key and private key 
			- Passwordless Authentication
	
	
		1 VM == 750 Hrs/Month

		10 VMs == 75 Hrs/Month
		
		It is always recommended to STOP the EC2 Instance if it is not in use!
	
	
	AMI 
	
		Choose : Ubuntu v22.04 LTS AMI
		
		
		Windows 
		Linux 
		Mac 
		
		
		Linux based AMI :::
		
			Linux Open-Source Operating System :
				
				UNIX OS
				
				- Linux Distribution 
										Package Manager (Used to Install/Uninstall/Upgrade the packages)
					Debian/Ubuntu			apt-get / apt 
					Centos/RHEL				yum 
					Fedora					dnf
					Previous version of Fedora uses yum package manager
					
					
				Window OS --> 
				
					- Windows Installer! -> Package Manager for Windows OS 
											- Used to Install/Uninstall/Upgrade the packages ad




		Created the Instance :::
		
		Running 
		
			Instance ID (Uniquely Generated)
			
			Name/Tag (We assign)
			
			Host Name :

				Public IP Address	(Will Change everytime we restart the Instance)

				Private IP Address 	(Constant IP Address, exist till you terminate the Instance)



	How to Connect to  EC2 Instances :::
	

		- Authentication Types :
			- Password Based Authentication
			- Token Based Authentication
			- Key Based Authentication
				- Public key and private key 
			- Passwordless Authentication	
			
			
		Host_Name 
		User_Name 
		Credentials 
	
		-	EC2 Instance Connect (Thru Browser - AWS Console) 
		
		-	SSH Agents :	(Tool installed in the client machine to access Linux VMs)
				MobaXterm	- 	https://mobaxterm.mobatek.net/download.html 
							https://mobaxterm.mobatek.net/download-home-edition.html - Choose Installer Edition
							Download *.zip
							Extract & run the exec file
		
							Open MobaXterm Tool 
							Select Session - Setting
								- Remote Host :Public IP Address 
								- User Name : ubuntu
								- Advanced Setting 
									- Choose Private key check box 
										- browse thru the *.pem from downloads folder
				Putty 
			
		-	Terminal :		# Ubuntu/Mac Users 
		
		
		Create AWS Account 
		
		Login to AWS Console as a root 
		
		Goto EC2 Instance Dashboard 
		
		Create EC2 Instance 
			- Create Key Pair 
			
		Connect to EC2 Instance using EC2 Instance Connect (Thru Browser - AWS Console) 
			
		
Fundamentals of Linux Operating System ::

Overview of Linux
Linux Architecture
Linux Distributions
Basic Linux Commands
File Permission Management
User Creation
Shell Scripts
SSH and VI Utility - Remote Server Access
			
			

	Operating System ::
	
		What is an Operating System ???
		
			- Is an interface between the user application and the Hardware.
			
		Windows
		Linux 
		Mac 
		
		Android 
		
		High End computation Servers 
		
			- Reliable OS
			- Linux Based OS 
			
			OS Architecture ::
			
				Linux - Kernel is the core of Linux 
				
				Manage the Underlying Hardware, User Applications, External Resources,  
				
				It create the process 
				Each and every process runs in its own address space/volume 
				Dedicated/Isolated path
				
					OS Kernel 
						Namespace 
						Control Group 
						
						
				Executed as Command Line Utilities 
				
				Traditional Linux are CUI (Command User Interface) Based  
				
				Windows are GUI (Graphical User Interface) based  
		
		Linux Distribution :::
			
			AWS Cloud --> Ubuntu v22.04			===> 	Azure --> Ubuntu v22.04
			
			
			
			- Linux Distribution 
									Package Manager (Used to Install/Uninstall/Upgrade the packages)
				Debian/Ubuntu			apt-get / apt 
				Centos/RHEL				yum 
				Fedora					dnf
				Previous version of Fedora uses yum package manager	

				All the package Manager should be executed as a root user.
				
				
			
		Basic Linux Commands :::
		
		
		sudo -i			# To elevate the access to root level
		hostname -i
		clear
		ls 
		pwd 			# present working directory
		


~~~~~~~~~~~~~~~~~~~~~~~
Day 3: 20th July 2024
~~~~~~~~~~~~~~~~~~~~~~~			
			
Fundamentals of Linux Operating System ::

Overview of Linux
Linux Architecture
Linux Distributions
Basic Linux Commands
File Permission Management
User Creation
Shell Scripts
SSH and VI Utility - Remote Server Access



	- Linux Distribution 
							Package Manager (Used to Install/Uninstall/Upgrade the packages)
		Debian/Ubuntu			apt-get / apt 
		Centos/RHEL				yum 
		Fedora					dnf
		Previous version of Fedora uses yum package manager	
		
	Why we need Linux ???
	
		Linux OS 
		
			Install and Manage all the DevOps Tools on Linux Machines  
			
			Open-Source DevOps Tools :
			
				git,jenkins,docker,kubernetes/Prometheus/Grafana,ansible,terraform
				
				
	
	What is your role here ???
	
	
		1. Install the DevOps Tools 
		2. Manage the Tools -- Periodically Clean-up/Upgrade the tools
		3. Remote access to the servers 
					Client - Server Architecture
					
					Server 
						- Client1,2,3,4,5
						
		4. DevOps Team can Administrate the Linux Machines 
		
			1. Package Management - install/uninstall/upgrade
			2. File Management 
			3. User Management 
			4. Access Management 
			5. Remote Server Management 
			6. Process Automation 
			
	Working with Linux OS :

	- Basic Linux Commands
			
			clear 
			
			root user will have complete admin access to Linux Machine.

	- Linux Distribution 
			Package Manager (Used to Install/Uninstall/Upgrade the packages)
		Debian/Ubuntu			apt-get / apt 
		Centos/RHEL				yum 
		Fedora					dnf
		Previous version of Fedora uses yum package manager				


	1. Package Management - install/uninstall/upgrade		
		clear 				# Clean the Command 
		sudo -i				# to elevate the access to root level
								Used to execute package manager 
						
		apt update -y 		# used to update the default packages 
		
		git,maven,docker,jenkin,ansible
		
		apt install git -y

		git --version 
		
		apt install maven -y
		
		apt install tree -y
		
		apt install nginx -y
		
		apt remove git -y 

		apt upgrade git -y
		
		
	File related commands :::
	
	2. File Management 	
	
	Directory 		# Is folder - collections of files & sub-folders
		- File Access Mode
			- Read/Write/Execute
	
	
	For any user in Linux, will have a home directory
	
	pwd 			# show Present working directory
	
	cd 				# Change Directory 

	cd /			# Control will be take to the root directory at the system level 
	
	cd ~			# Control will be taken to the home directory of the user level
	
	exit 			# Used to logout from a user 

	ls 				# Used to List the files and directories of the current path
	
	echo 			# Used to print the message on terminal/Console
	
	Create the files :::
	
		1. 	echo "Hello Everyone" >> file1.txt		# Create the file 
			echo "Session1" > file.txt 
			
			cat file1.txt 							# To print the content of the file 
			
		2. touch file2.txt 							# Used to create empty file 
		
		3. vi file3.txt								# Create or edit a file using vi editor
		
		
			Press i 								# goto insert mode 
			Type the file contents
			
			Press ===>		esc key 
			Type 	===>  	:wq						# Save and Exit from vi editor 
			Type 	===>  	:q!						# Exit from vi editor without saving the changes
			
		
	ll				# Long List
			
	mkdir 			# Make / Create Directory
	
	cd ..			# go back to previous directory
	
	
	Working with Directories ::::
	
		Hidden Files/Directories --> 
		
		all the hidden files/directories will be prefixed with .
		
		
	echo "rec1" >> .s1.txt				# Create a hidden file 
	
	mkdir .dir2							# Create Hidden Directory
	
	mv s1.txt payment.text				# Rename a file 
			
	mv s2.txt subdir1/					# Move the file from one dir to another
	
	cp s1.txt subdir1/					# Copy the file from one dir to another
	
	rm -rf subdir1/						# Remove the folder 
	
	rm file1.txt						# Remove the file 
	
	rm *.java 							# Remove Multiple files using wild-card symbol *
	
	rm file1.txt file2.txt 				# Remove multiple files 
	
	
	
	What is Deployment ??
	
		Copying the artifacts from one machine to another machine 
		
		Dev Server 		*.war
		
		Test Server 	*.war
	
	

	ll				# Long List
	
		First 1 character are used to identify the type of component and its access level 
		
		
	Project Folder -- Source Code & Program to execute
	
	
	Owner	
	
	Group of Users 
	
	Public/Common User 
	
	
	User: Dev 	- Group: Development Team
	
	
	drwxrwxr-x 2 ubuntu ubuntu 4096 Jul 20 06:35 dir1/
	
	
	drwxrwxr-x
	
	----------

	-							# Used to identify the type of component - file/directory  	
								# Possibel values are ====> '-' and 'd'
								
	 ---						# Owner : Possible values are rwx	 Read / Write / Execute 						
	 
	    ---						# User Group : Possible values are rwx	 Read / Write / Execute
		
		   ---					# Possible values are rwx	 Read / Write / Execute


	Eg.:
	
	payment.java 
	
	
	-rwx------					# Owner of the file can have Read / Write / Execute access.

	-rw-------					# Owner of the file can have Read and  Write access.

	-rwxr-----					# Owner of the file can have Read / Write / Execute access.
								# User Group can just read the file 
								
	-rwxrw-r--					# Owner of the file can have Read / Write / Execute access.	
								# User Group can just read & Write the file 
								# Common user can just read the file content 
								
								
	chmod 
	
	https://chmod-calculator.com/
	
	
	
	User Management :::
	
		- How to create Users on linux Machine 
		
		- How to login to that user 
		
		- Setup the Access to that user 
		
		- Define ownership 
		
		
	DevOps :::
	
		Create some Virtual Machines :::
		
			server (VM)
				Clients (VM) 1,2,3,4,5 
				
				
		Create : devopsadmin user 
		
		Remote Server :::
		
			SSH Protocol :
			
				Host Name 
				
				User Name 
				
				User Credentials
	


		ls -a				# Used to get the list of all components including hidden files and directories


		Is SSH ::
		
			By Default :
			
				Key based authentication :::
				
					Public Key 
					
					Private Key 
					
			Password based authentication :::
			
			
		cd /etc				# Directory maintains all the packages and system properties 
		
		cat /etc/passwd		# Used to get the list of users 
		
		cat /etc/group 		# Used to get the list of user groups 
		
		
		user1 
		
		user2 
		
		dev_group
		
		Install Docker -- Container Engine 
		
		docker group 
		
		devopsadmin 
		
		Group level Access
		
		
		Create New Linux User :::

			Excute these commands as a root user:	

			#useradd devuser1
			
			useradd devuser2 -s /bin/bash -m -d /home/devuser2		# Create User 
			
			su - devuser2											# Login to that user
			
		How to create password for Linux users 
				
				passwd <user_id>
				
				passwd devuser2										# Create Password 
				
				New Password :									 	# Is a Hidden field Enter valid password 			
				
				Re-Type New Password : 								# Is a Hidden field re-type & confirm password 
		
		
~~~~~~~~~~~~~~~~~~~~~~~
Day 4: 21st July 2024
~~~~~~~~~~~~~~~~~~~~~~~		

	SSH Key Based Authentication
		- with some real time scenarios

	Handle Remote Server and Interact with Multiple Remote Servers 
		- Using Key Based Authentication
		
	Package Installation Procedures ****
	
	Process Automation using Shell Scripts 


Create Linux Users :::

	Ubuntu :::
	
		useradd devuser2 -s /bin/bash -m -d /home/devuser2

	RHEL / Amazon Linux :::
	
	
	visudo 			# command is used to setup additional features to any linux user.
	
	The Default Authentication Type :
	
		Key Based Authentication
		
		Password Based Authentication 

	#Goto:

	vi /etc/ssh/sshd_config

	#Enable Password Authentication to Yes and save the file
	#Execute Below command to update the changes.

	service sshd reload

	SSH Key Based Authentication
		- with some real time scenarios		# Dynamic ssh-key creation
		
			- create a keypair 				ssh-keygen  # create .ssh
			- connect to that machine 
			- delete the keypair 			rm -rf .ssh


	SSH Key Pair :
	
		public key 
		
		private key 
		
		authorized_keys  # Is a copy of the public key


	Launch :
		Create Key Pair 
			*.pem 			# Private Key		# Downloaded to local machine 
			
		mobaxterm :: private 
	
Server :			USRDATA AS START-UP TASK 

useradd sadevopsadmin -s /bin/bash -m -d /home/sadevopsadmin

#useradd sadevopsadmin

su - sadevopsadmin	

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				

ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public

ssh sadevopsclient@172.31.35.74

sadevopsclient ALL=(ALL) NOPASSWD: ALL


Client :::

useradd sadevopsclient -s /bin/bash -m -d /home/sadevopsclient

#useradd sadevopsclient

su - sadevopsclient

ls -a 

mkdir .ssh 

cd .ssh

vi authorized_keys

# paste the content of sadevopsadmin's public key


















vi authorized_keys

#paste the id_ecdsa.pub of devopsadmin user from controller machine to authorized_keys file in Ansible Node1 

chmod 600 /home/ansibleadmin/.ssh/*


# Use the private IP addr. of AN1 and AN2

#ssh-copy-id ansibleadmin@172.31.36.144
#ssh-copy-id ansibleadmin@172.31.33.217

ssh ansibleadmin@172.31.5.190
ssh ansibleadmin@172.31.6.228





Package Installation Procedures **** ::
	
	1. yum update 
	2. install the req. package 
	3. 

	1. Name & What type of package it is ?
	
		- Install all the pre-requisites (if required)
		- Install the actual package 
		- Post Installation Activities (if required)
		
		
	software/packages can be executed as task or as a service ?
	
		git 		third party tool 
			download and install in any node/machine 
			
		
		tree 
		
		shell script 
		
			./script.sh 			# Manual execution 
			crontab 				# It is used to schedule the script to run
			
			
		
		All service package should be started upon installation.
		
	
	Deployment Server:
	
	Environments :::
	
		Non-Prod Environments							=====>				Production Environments
		
			Dev Environment
			Build Environment
			Test Environments
				QA  - Quality Assurance Testing 
				UAT - User Acceptance Testing			----->					Production Server(s) - 24/7
	
		Target/Hosted/Deployment server				Hardware - Computing Environment
				- Install some web application servers 		 - Software 
						- Tomcat 
						- Apache
						- nginx
						
			QA 			
			UAT 
			Prod 

		Server :
		
			To Install Tomcat Web Application Server :
			
				1. Install jdk 
				2. Install Tomcat 
				3. Start Tomcat 
				
			To Install Jenkins :
			
				1. Install jdk, Update jenkins Repos 
				2. Install Jenkins 
				3. Start Jenkins 
				


Process Automation using Shell Scripts :::

	Linux Shell Scripting :::

	Programming Language :::

		- Are used by the Developers to create business applications 
		- java/python/.net framework,......
		
		- client side scripting ::
		
		
	Scripting Language :::
	
		- Process Automation :::
		- shell/groovy/yaml/python scripting languages 
		
	Programming or scripting ???
	
		Objective?
		
		Data : piece of information ?
		
		information : ? 
		
		Data --> Is just a raw fact. Without any meaning!
		
		Information --> Is a processed Data is called as information 
		
		INDIA 				--> raw fact 
		
		INDIA is a Country 	--> Information
		
	Shell Scripts :

		Collection of linux shell commands 
		
		
		
	echo "Hello" 
	
	data :
	
	variable name 
	
	Data Type 
	
	int x = 5 
	
	char y = 's'
	
	String z = "asdf"
	
	x = 5

	
	Array x[10] = {0,1,2,3,4,5,6,7,8,9}
	
	Conditional Statements :
	
	if condition statements
	
	switch case statements 
	
	Operators 
	
	
	a = 10
	
	b = 5 
	
	
	Comparison operator 
	
	if (a > b)
	{
		echo "a is greater"
	}	
	
	Looping statement :	to iterate the task 
	
	x = 5

		echo "${x}"
		
	x[4] = {1,2,3,4}
	
	index starts with 0 
	
	x[0]	==> 1
	x[1]	==> 2
	x[3]	==> 3
	x[3]	==> 4
	
	x[4]	==> Out or Range error 
	
	for loop
	while loop
	do while 
	
		for(i=0;i<n;i++)
		{
			echo $x
		}
		
		1
		2
		3
		4
		
	File Concepts :	--> Sequential 

		File Handling 
			- create 
			- write 
			- update 
			- delete 
	
	Database Handling :
		Tables 
		
	
	ETL 
	
	Handle remote servers to promote the data or files 
	
	Automate the server provioning and configuration using scripts & promote the files 
	
	Requirement Analysis ::
	
	Design Phase ::
	
	
	Algorithms : 	It is just a step by step process to achieve any task 
					It is written in a common use understandable languages
					It is not specific to any programming or scripting languages 
					
	1. Calculate and print the sum of two numbers ?	

		int a, b;
		get a, b 
		c = a + b 
		print c 
		
		5 + 5 = ?
		
		100 + 1000 = ?
			
		12.5 + 12.5 = ?
		
		11111111111111111 + 222222222222222222222 = ?
	
	
	Psudo Code :	shell 
	
		int a, b;
		get a, b 
		c = a + b 
		echo c	
	
	Coding & Development 
	
	Testing 
	
	Implementation 
	
	
	shell scripting ::
	
	syntax of shell scripting

Unix OS 

sh prompt 

Linux OS 

bash prompt 

	shell script file name should be saved as *.sh

#!/bin/bash
	
	
#!/bin/bash
sudo yum update
sudo yum install ruby
sudo yum install wget
sudo yum install java-11-amazon-corretto
sudo yum install java-11-amazon-corretto-devel
sudo yum -y install tomcat8	
	
	
	
Scenario 1:

	Create/Setup a Build Server ::	Java 
	
		javatoolssetup.sh
		
		sudo apt update 
		sudo apt install jdk11
		sudo apt install maven 
	
	Create/Setup a Deployment Server ::
	
		appdeploysetup.sh 			# only on debian/ubuntu/rhel/centos
		
		
		if [os_distri == ubuntu -o os_distri == debian ]
		
			sudo apt update 
			sudo apt install jdk17 
			sudo apt install tomcat8 
		
		elif [os_distri == rhel -o os_distri == centos ]
	
		
			sudo yum update 
			sudo yum install jdk17 
			sudo yum install tomcat8 
		
		fi
		
		
	while loop 		/  for loop 
		- This will first check for the condition.
		- If the condition satisfies, it will execute the given task 
		- else it will not proceed 
	
	do-while loop
		- first it execute a task atleast once 
		- then check for condition, to execute further 
