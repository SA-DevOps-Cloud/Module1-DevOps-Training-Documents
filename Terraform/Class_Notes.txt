~~~~~~~~~~~~~~~~~~~~~~~
Day 11: 24th Aug. 2024
~~~~~~~~~~~~~~~~~~~~~~~	
	
	Fundamentals of Terraform :::

	Docker :::
	
	Fundamentals of Monitoring Tools :::
	
	https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html
	
	
	Fundamentals of Terraform :::
	
		IAC Tool --> Used to provision the resources!
		
		Create AWS/Azure/GCP
	
	
	Terraform is a Open-Source IAC Tool 
	
	
	Terraform Architecture
	
	Terraform Working Model 
	
		- Identify the Scope - (AWS/Az/GCP)
		
		- Write the Terraform Script 	--> EC2 Instance 
		
		- Terraform Init 	==> Initialize the Terraform Providers in the terraform project 
		
		- Terraform Plan 	==> Preview the Terraform Script 
		
		- Terraform Apply	==> Implement the changes in the target environment
		
	
	Terraform Registry 
	
	Install Terraform ::
	
		https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
		
		Install Terraform on Windows Machine
		
			- Goto https://developer.hashicorp.com/terraform/install
			- Under Windows Tab : select amd64 Download 
				- Download Terraform_Package - zipfile 
				- Extract zipfile
					- Folder --> terraform execuable!
					
					
				- From Windows start menu, search for Environment
					- System Properties 
						- Selection Environment Varibles 
							- System Variables 
								- select path 
									- edit 
										- new 
											- add the terraform default path 
					
					
			- Install Visual Studio Code - IDE
				https://code.visualstudio.com/download
				
				Open Visual Studio Code :
				
				Goto Plugins/Extensions Tab : 
					Search for Terraform 
						- Install HashiCorp Terraform Extension for Visual Studio Code 
				
			Write the terraform scripts!
	
	
			- Identify the Scope - (AWS)
			
			- Write the Terraform Script 	--> EC2 Instance 
			
					- Create a Script :
						Identify the provider definition 
							- AWS Access Key 				Ayyyh6
							- AWS Secret Key 				0RasdfsadfsdQDf
							
							
			
			
			- Terraform Init 	==> Initialize the Terraform Providers in the terraform project 
			
			- Terraform Plan 	==> Preview the Terraform Script 
			
			- Terraform Apply	==> Implement the changes in the target environment
			
			
			Using Terraform :::
			
				Add/Create Resource 		+
				
				Delete/Destroy Resource 	- 
				
				Change/Modify Resource		~




#################################################################################################3333
provider "aws" {
  region     = "ap-south-1"
  access_key = "A24F"
  secret_key = "3+D"
}

# Create AWS Instance

resource "aws_instance" "wkinstance1" {
  
  ami           = "ami-0ae8f15ae66fe8cda"
  instance_type = "t2.micro"
  key_name      = "may20-keypair"

  tags = {
    Name = "wkTestInstance1"
  }
}


#################################################################################################3333

Install Terraform --> Local Windows Machine!!!

Use Command prompt to run Terraform commands like : terraform init, terraform plan, terraform apply, etc..

Create the Config file ?

Visual Studio Code  to create or develop Terraform Config files! i.e., *.tf files 






provider "aws" {
  region     = "ap-south-1"
  access_key = "AKF"
  secret_key = "3i+D"
}


# Create VPC

resource "aws_vpc" "myvpc9" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myvpc9"
  }
}

# Create Subnet 

resource "aws_subnet" "mysubnet9" {
  vpc_id     = aws_vpc.myvpc9.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "mysubnet9"
  }
}

# Internet Gateway

resource "aws_internet_gateway" "mygw9" {
  vpc_id = aws_vpc.myvpc9.id

  tags = {
    Name = "mygw9"
  }
}

# Route Table

resource "aws_route_table" "myrt9" {
  vpc_id = aws_vpc.myvpc9.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.mygw9.id
  }

  tags = {
    Name = "myrt9"
  }
}

# Route Table Association

resource "aws_route_table_association" "myrta9" {
  subnet_id      = aws_subnet.mysubnet9.id
  route_table_id = aws_route_table.myrt9.id
}

# Security Groups

resource "aws_security_group" "mysg9" {
  name        = "mysg9"
  description = "Allow inbound traffic"
  vpc_id      = aws_vpc.myvpc9.id

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "mysg9"
  }
}

# Create Instance

resource "aws_instance" "instance9" {
  ami           = "ami-0f58b397bc5c1f2e8"
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id = aws_subnet.mysubnet9.id
  vpc_security_group_ids = [aws_security_group.mysg9.id]
  key_name = "awskey-124"

  tags = {
    Name = "Dummy_Server0"
  }
}


